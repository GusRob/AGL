/* ****************************************************************************************** */
/* Preprocessor                                                                               */
/* ****************************************************************************************** */

#include <iostream>

#include <Window.hpp>
#include <Scene.hpp>
#include <Math.hpp>

#define C_WIDTH  (600)
#define C_HEIGHT (600)

/* ****************************************************************************************** */
/* Variables                                                                                  */
/* ****************************************************************************************** */

std::vector<AGL::Vertex_s> CubeVertices = {
	//                                                Texture
	//   Position               Normals               Coordinates
	{ { -1.0f, -1.0f,  1.0f }, {  0.f,  0.f,  1.f }, { 0.f, 1.f } },
	{ {  1.0f, -1.0f,  1.0f }, {  0.f,  0.f,  1.f }, { 1.f, 1.f } },
	{ {  1.0f,  1.0f,  1.0f }, {  0.f,  0.f,  1.f }, { 1.f, 0.f } },
	{ { -1.0f,  1.0f,  1.0f }, {  0.f,  0.f,  1.f }, { 0.f, 0.f } },

	{ {  1.0f, -1.0f,  1.0f }, {  1.f,  0.f,  0.f }, { 0.f, 1.f } },
	{ {  1.0f, -1.0f, -1.0f }, {  1.f,  0.f,  0.f }, { 1.f, 1.f } },
	{ {  1.0f,  1.0f, -1.0f }, {  1.f,  0.f,  0.f }, { 1.f, 0.f } },
	{ {  1.0f,  1.0f,  1.0f }, {  1.f,  0.f,  0.f }, { 0.f, 0.f } },

	{ {  1.0f, -1.0f, -1.0f }, {  0.f,  0.f, -1.f }, { 0.f, 1.f } },
	{ { -1.0f, -1.0f, -1.0f }, {  0.f,  0.f, -1.f }, { 1.f, 1.f } },
	{ { -1.0f,  1.0f, -1.0f }, {  0.f,  0.f, -1.f }, { 1.f, 0.f } },
	{ {  1.0f,  1.0f, -1.0f }, {  0.f,  0.f, -1.f }, { 0.f, 0.f } },

	{ { -1.0f, -1.0f, -1.0f }, { -1.f,  0.f,  0.f }, { 0.f, 1.f } },
	{ { -1.0f, -1.0f,  1.0f }, { -1.f,  0.f,  0.f }, { 1.f, 1.f } },
	{ { -1.0f,  1.0f,  1.0f }, { -1.f,  0.f,  0.f }, { 1.f, 0.f } },
	{ { -1.0f,  1.0f, -1.0f }, { -1.f,  0.f,  0.f }, { 0.f, 0.f } },

	{ { -1.0f,  1.0f,  1.0f }, {  0.f,  1.f,  0.f }, { 0.f, 1.f } },
	{ {  1.0f,  1.0f,  1.0f }, {  0.f,  1.f,  0.f }, { 1.f, 1.f } },
	{ {  1.0f,  1.0f, -1.0f }, {  0.f,  1.f,  0.f }, { 1.f, 0.f } },
	{ { -1.0f,  1.0f, -1.0f }, {  0.f,  1.f,  0.f }, { 0.f, 0.f } },

	{ { -1.0f, -1.0f, -1.0f }, {  0.f, -1.f,  0.f }, { 0.f, 1.f } },
	{ {  1.0f, -1.0f, -1.0f }, {  0.f, -1.f,  0.f }, { 1.f, 1.f } },
	{ {  1.0f, -1.0f,  1.0f }, {  0.f, -1.f,  0.f }, { 1.f, 0.f } },
	{ { -1.0f, -1.0f,  1.0f }, {  0.f, -1.f,  0.f }, { 0.f, 0.f } }
};

std::vector<uint32_t> CubeIndices = {
	 0,  1,  2,  2,  3,  0, /* front */
	 4,  5,  6,  6,  7,  4, /* right */
	 8,  9, 10, 10, 11,  8, /* back */
	12, 13, 14, 14, 15, 12, /* left */
	16, 17, 18, 18, 19, 16, /* top */
	20, 21, 22, 22, 23, 20, /* bottom */
};


/* ****************************************************************************************** */
/* Function Prototypes                                                                        */
/* ****************************************************************************************** */

/* None */

/* ****************************************************************************************** */
/* Main Function                                                                              */
/* ****************************************************************************************** */

int main( int argc, char* argv[] ) {
	AGL::Window_c Window = AGL::Window_c(C_WIDTH, C_HEIGHT, "Example Program 1: Cube", NULL);

	AGL::Scene_c Scene = AGL::Scene_c(Window);

	uint32_t ObjectIndex = Scene.AddObjectFromData(CubeVertices, CubeIndices);
	Scene.SetObjectScale(ObjectIndex, 10);
	Scene.SetObjectRotation(ObjectIndex, math::makeXRotate(-3.14/8) * math::makeYRotate(-3.14/4)); //rotate 45 about y and 22 about x
	Scene.SetObjectPosition(ObjectIndex, simd::float3{0, 0, -10});

	Window.AddScene(Scene);

	Window.Run(); //will not return
}

/* ****************************************************************************************** */
/* Function Implementations                                                                   */
/* ****************************************************************************************** */

/* None */
