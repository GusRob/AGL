# -------------------------------------------------------------------------------------------- #

# Recursive Wildcard Function
rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

# -------------------------------------------------------------------------------------------- #

# Project Definitions
PROJECT_NAME       := AGL
PROJECT_NAME_LOWER := AGL

# -------------------------------------------------------------------------------------------- #

# Location Definitions
BUILD_DIR       := build
BIN_DIR         := bin
EXMPL_DIR       := examples
LIB_DIR         := lib
INCLD_DIR       := include
SRC_DIR         := src
PUB_SRC_DIR     := $(SRC_DIR)/public
PRV_SRC_DIR     := $(SRC_DIR)/private

# Lib Definitions
METAL_INCL       := $(INCLD_DIR)/metal-cpp
METAL_EXT_INCL   := $(INCLD_DIR)/metal-cpp-extensions
ASSIMP_INCL      := $(INCLD_DIR)/assimp

# Include paths for the Examples
EXMPL_INCL         := $(INCLD_DIR)/$(PROJECT_NAME_LOWER)
EXMPL_INCL_SUBDIRS := $(INCLD_DIR)/$(PROJECT_NAME_LOWER)

# -------------------------------------------------------------------------------------------- #

# Source File Definitions
AGL_METAL     := $(call rwildcard,$(SRC_DIR),*.metal)
AGL_METAL_IR  := $(patsubst %.metal, $(BUILD_DIR)/%.metalir, $(AGL_METAL))
AGL_METAL_LIB := $(BUILD_DIR)/$(PRV_SRC_DIR)/Shader/ShaderLib.metallib
AGL_METAL_CPP := $(PRV_SRC_DIR)/Shader/ShaderLib.cpp
AGL_METAL_HPP := $(PRV_SRC_DIR)/Shader/ShaderLib.hpp

AGL_DFLT_ASS_RAW := $(call rwildcard, $(PRV_SRC_DIR)/DefaultAssets/RawAssets, *)
AGL_DFLT_ASS_BIN := $(patsubst $(PRV_SRC_DIR)/DefaultAssets/RawAssets/%, $(PRV_SRC_DIR)/DefaultAssets/BinaryData/%, $(AGL_DFLT_ASS_RAW))
AGL_DFLT_ASS_CPP := $(AGL_DFLT_ASS_BIN:png=cpp)
AGL_DFLT_ASS_HPP := $(patsubst %.cpp, %.hpp, $(AGL_DFLT_ASS_CPP))

AGL_CPP := $(call rwildcard,$(SRC_DIR),*.cpp)
AGL_DEP := $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/$(SRC_DIR)/%.d, $(AGL_CPP))
AGL_OBJ := $(sort $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/$(SRC_DIR)/%.o, $(AGL_CPP) $(AGL_METAL_CPP) $(AGL_DFLT_ASS_CPP))) #Adding generated cpp manually because it might not exist yet
AGL_DLL := $(LIB_DIR)/lib$(PROJECT_NAME).dylib

# Public headers only for include folder
AGL_HPP := $(call rwildcard,$(PUB_SRC_DIR),*.hpp)

# Example File Definitions
EXMPL_CPP := $(call rwildcard,$(EXMPL_DIR),*.cpp)
EXMPL_DEP := $(patsubst $(EXMPL_DIR)/%.cpp, $(BUILD_DIR)/$(EXMPL_DIR)/%.d, $(EXMPL_CPP))
EXMPL_OBJ := $(patsubst $(EXMPL_DIR)/%.cpp, $(BUILD_DIR)/$(EXMPL_DIR)/%.o, $(EXMPL_CPP))
EXMPL_BIN := $(patsubst $(EXMPL_DIR)/%.cpp, $(BIN_DIR)/%, $(EXMPL_CPP))

# Clean Files (Generated by build process / To be removed)
CLEAN_GEN_SRC := $(wildcard $(AGL_METAL_CPP)) $(wildcard $(AGL_METAL_HPP)) $(call rwildcard, $(PRV_SRC_DIR)/DefaultAssets/BinaryData, *)
CLEAN_BIN     := $(call rwildcard,$(BIN_DIR), *)
CLEAN_BUILD   := $(call rwildcard,$(BUILD_DIR), *)

# -------------------------------------------------------------------------------------------- #

# General Build settings
CC := clang++
CP := cp

# AGL Settings
AGL_COMM := -Wall -std=c++20 -fno-objc-arc -O2
AGL_INCL := $(sort $(dir $(call rwildcard,$(SRC_DIR),*.cpp) $(call rwildcard,$(SRC_DIR),*.hpp) $(AGL_METAL_CPP)  $(AGL_DFLT_ASS_CPP))) #Adding generated cpp manually because it might not exist yet
AGL_COMP := -c $(addprefix -I./, $(METAL_INCL) $(METAL_EXT_INCL) $(ASSIMP_INCL) $(AGL_INCL)) -MP -MMD
AGL_LINK := $(addprefix -framework , Metal Foundation Cocoa CoreGraphics MetalKit) -L$(LIB_DIR) -lassimp

# Example Settings
EXMPL_COMM := -Wall -std=c++20 -fno-objc-arc -O2
EXMPL_COMP := -c -I./$(EXMPL_INCL) -MP -MMD
EXMPL_LINK := -L$(LIB_DIR) -lAGL

# -------------------------------------------------------------------------------------------- #

# Default rule: build library and examples
.PHONY: all
all: shader defaultassets library examples

# Cleans then makes all
.PHONY: refresh
refresh: clean all

# -------------------------------------------------------------------------------------------- #

.PHONY: help
help:
	@echo 'Make Targets:'
	@echo '    all (default)'
	@echo '    clean'
	@echo '    refresh'
	@echo '    library'
	@echo '    examples'

# -------------------------------------------------------------------------------------------- #

.PHONY: clean
clean:
	@echo '-----------------'
	@echo 'Clean Files...'
	@echo '-----------------'
ifneq ($(words $(CLEAN_GEN_SRC)),0)
	@echo 'Cleaned  : Generated src'
	@rm -r $(CLEAN_GEN_SRC)
endif
ifneq ($(words $(CLEAN_BIN)),0)
	@echo 'Cleaned  : bin'
	@rm -r $(CLEAN_BIN)
endif
ifneq ($(words $(CLEAN_BUILD)),0)
	@echo 'Cleaned  : build'
	@rm -r $(CLEAN_BUILD)
endif

# -------------------------------------------------------------------------------------------- #

.PHONY: library
library: $(AGL_DFLT_ASS_HPP) $(AGL_METAL_HPP) $(AGL_DLL)

# Link Library files
$(AGL_DLL): $(AGL_OBJ)
	@echo 'Build Lib       : $@'
	@echo '-----------------'
	@$(CC) -shared -o $@ $(AGL_COMM) $(AGL_LINK) $(AGL_OBJ)
	@$(CP) $(AGL_HPP) $(EXMPL_INCL)/

# Compile Library files
$(BUILD_DIR)/$(SRC_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo 'Compile         : $@'
	@mkdir -p $(@D)
	@$(CC) $(AGL_COMM) $(AGL_COMP) -o $@ $<

-include $(AGL_DEP)

# -------------------------------------------------------------------------------------------- #

.PHONY: defaultassets
defaultassets: $(AGL_DFLT_ASS_HPP)

$(AGL_DFLT_ASS_HPP): $(AGL_DFLT_ASS_CPP)
	@mkdir -p $(@D)
	@xxd -i -n $(basename $(notdir $@))RawData $< | sed -n -E '\
		/^unsigned (char|int) [a-zA-Z0-9_]+(\[\])? =/ { \
			s/ =.*//; \
			s/^/extern /; \
			s/$$/;/; \
			p; \
		}' > $@
	@echo 'Make AssetHpp  : $@'
	@echo '-----------------'

$(AGL_DFLT_ASS_CPP): $(AGL_DFLT_ASS_RAW)
	@mkdir -p $(@D)
	@xxd -i -n $(basename $(notdir $@))RawData $< > $@
	@echo 'Make AssetCpp : $@'

# -------------------------------------------------------------------------------------------- #

.PHONY: shader
shader: $(AGL_METAL_HPP)

# Build Metal Shader Libraries
$(AGL_METAL_HPP): $(AGL_METAL_CPP)
	@mkdir -p $(@D)
	@xxd -i -n $(basename $(notdir $@))RawData $< | sed -n -E '\
		/^unsigned (char|int) [a-zA-Z0-9_]+(\[\])? =/ { \
			s/ =.*//; \
			s/^/extern /; \
			s/$$/;/; \
			p; \
		}' > $@
	@echo 'Make ShaderHpp  : $@'
	@echo '-----------------'

$(AGL_METAL_CPP): $(AGL_METAL_LIB)
	@mkdir -p $(@D)
	@xxd -i -n $(basename $(notdir $@))RawData $< > $@
	@echo 'Make ShaderCpp : $@'

$(AGL_METAL_LIB): $(AGL_METAL_IR)
	@mkdir -p $(@D)
	@xcrun -sdk macosx metallib -o $@ $<
	@echo 'Build ShaderLib : $@'

# Compile Metal Shader files
$(BUILD_DIR)/%.metalir: %.metal
	@mkdir -p $(@D)
	@xcrun -sdk macosx metal -c -o $@ $<
	@echo 'Compile Shader  : $@'

# -------------------------------------------------------------------------------------------- #

.PHONY: examples
examples: $(EXMPL_BIN)

# Link Example files
$(BIN_DIR)/%: $(BUILD_DIR)/$(EXMPL_DIR)/%.o
	@mkdir -p $(@D)
	@$(CC) $(EXMPL_COMM) $(EXMPL_LINK) -o $@ $<
	@echo 'Link Example    : $@'
	@echo '-----------------'

# Compile Example files
$(BUILD_DIR)/$(EXMPL_DIR)/%.o: $(EXMPL_DIR)/%.cpp
	@mkdir -p $(@D)
	@$(CC) $(EXMPL_COMM) $(EXMPL_COMP) -o $@ $<
	@echo 'Compile Example : $@'

-include $(EXMPL_DEP)

.SECONDARY: $(EXMPL_OBJ) $(AGL_METAL_IR)
